# Generated by Django 5.2 on 2025-05-26 05:57

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("facility", "0007_weather"),
    ]

    operations = [
        migrations.CreateModel(
            name="Night",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True, unique=True)),
                ("sunset", models.DateTimeField(blank=True, null=True)),
                ("sunrise", models.DateTimeField(blank=True, null=True)),
                ("evening_twilight_end", models.DateTimeField(blank=True, null=True)),
                ("morning_twilight_start", models.DateTimeField(blank=True, null=True)),
                (
                    "evening_astronomical_twilight",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "morning_astronomical_twilight",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "moon_phase",
                    models.FloatField(
                        blank=True,
                        help_text="Moon phase (0=new, 0.25=first quarter, 0.5=full, 0.75=last quarter)",
                        null=True,
                    ),
                ),
                (
                    "moon_illumination",
                    models.FloatField(
                        blank=True,
                        help_text="Percentage of moon illuminated (0-100)",
                        null=True,
                    ),
                ),
                (
                    "moon_alt_max",
                    models.FloatField(
                        blank=True,
                        help_text="Maximum moon altitude during night in degrees",
                        null=True,
                    ),
                ),
                (
                    "moon_ra",
                    models.FloatField(
                        blank=True,
                        help_text="Moon right ascension at midnight (degrees)",
                        null=True,
                    ),
                ),
                (
                    "moon_dec",
                    models.FloatField(
                        blank=True,
                        help_text="Moon declination at midnight (degrees)",
                        null=True,
                    ),
                ),
                (
                    "sky_quality",
                    models.CharField(
                        choices=[
                            ("unknown", "Unknown/Not Determined"),
                            ("photometric", "Photometric"),
                            ("clear", "Clear"),
                            ("cloudy", "Cloudy"),
                            ("partly_cloudy", "Partly Cloudy"),
                            ("bad", "Bad"),
                        ],
                        default="unknown",
                        max_length=20,
                    ),
                ),
                (
                    "bias_count",
                    models.IntegerField(
                        default=0, help_text="Number of bias frames taken"
                    ),
                ),
                (
                    "dark_count",
                    models.IntegerField(
                        default=0, help_text="Number of dark frames taken"
                    ),
                ),
                (
                    "flat_count",
                    models.IntegerField(
                        default=0, help_text="Number of flat frames taken"
                    ),
                ),
                (
                    "science_count",
                    models.IntegerField(
                        default=0, help_text="Number of science frames taken"
                    ),
                ),
                (
                    "distinct_tiles",
                    models.IntegerField(
                        default=0, help_text="Number of distinct tiles observed"
                    ),
                ),
                (
                    "total_exptime",
                    models.FloatField(
                        default=0, help_text="Total exposure time in seconds"
                    ),
                ),
                (
                    "filter_statistics",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Statistics by filter (counts, exposure times)",
                    ),
                ),
                (
                    "avg_seeing",
                    models.FloatField(
                        blank=True, help_text="Average seeing in arcseconds", null=True
                    ),
                ),
                (
                    "data_directory",
                    models.CharField(
                        blank=True,
                        help_text="Path to data directory for this night",
                        max_length=255,
                    ),
                ),
                (
                    "data_directories",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of all data directories associated with this night",
                    ),
                ),
                (
                    "directory_variants",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Directory variants information",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Observer notes for this night"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-date"],
                "indexes": [
                    models.Index(fields=["date"], name="survey_nigh_date_bb3ef5_idx"),
                    models.Index(
                        fields=["sky_quality"], name="survey_nigh_sky_qua_7b387b_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Tile",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=6, unique=True)),
                ("ra", models.FloatField()),
                ("dec", models.FloatField()),
                ("vertices", django.contrib.gis.db.models.fields.PolygonField(srid=0)),
                (
                    "first_observed",
                    models.DateField(
                        blank=True, help_text="Date first observed", null=True
                    ),
                ),
                (
                    "last_observed",
                    models.DateField(
                        blank=True, help_text="Date last observed", null=True
                    ),
                ),
                (
                    "observation_count",
                    models.IntegerField(
                        default=0, help_text="Total number of science frames"
                    ),
                ),
                (
                    "total_exposure_time",
                    models.FloatField(
                        default=0, help_text="Total exposure time in seconds"
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=5, help_text="Observing priority (1=highest, 10=lowest)"
                    ),
                ),
                (
                    "survey_program",
                    models.CharField(
                        blank=True,
                        help_text="Survey program this tile belongs to",
                        max_length=50,
                    ),
                ),
                (
                    "area_sq_deg",
                    models.FloatField(
                        blank=True, help_text="Area in square degrees", null=True
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["ra", "dec"], name="survey_tile_ra_a6ea22_idx"
                    ),
                    models.Index(fields=["name"], name="survey_tile_name_4fbaec_idx"),
                    models.Index(
                        fields=["priority"], name="survey_tile_priorit_3b3b0a_idx"
                    ),
                    models.Index(
                        fields=["first_observed"], name="survey_tile_first_o_e25419_idx"
                    ),
                    models.Index(
                        fields=["last_observed"], name="survey_tile_last_ob_6bb8da_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UnitStatistics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_observation", models.DateTimeField(blank=True, null=True)),
                ("last_observation", models.DateTimeField(blank=True, null=True)),
                ("bias_frame_count", models.IntegerField(default=0)),
                ("dark_frame_count", models.IntegerField(default=0)),
                ("flat_frame_count", models.IntegerField(default=0)),
                ("science_frame_count", models.IntegerField(default=0)),
                (
                    "total_exposure_time",
                    models.FloatField(
                        default=0, help_text="Total science exposure time in seconds"
                    ),
                ),
                (
                    "distinct_tiles_observed",
                    models.IntegerField(
                        default=0, help_text="Number of distinct tiles observed"
                    ),
                ),
                (
                    "distinct_nights",
                    models.IntegerField(
                        default=0, help_text="Number of distinct nights used"
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "unit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statistics",
                        to="facility.unit",
                    ),
                ),
            ],
        ),
    ]
