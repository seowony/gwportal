# Generated by Django 5.2 on 2025-06-12 06:49

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("facility", "0007_weather"),
        ("survey", "0002_night_files_scanned_night_scan_completed_at_and_more"),
    ]

    operations = [
        migrations.RenameField(
            model_name="unitstatistics",
            old_name="total_exposure_time",
            new_name="total_exptime",
        ),
        migrations.CreateModel(
            name="BiasFrame",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "original_filename",
                    models.CharField(
                        db_index=True,
                        help_text="Original filename as stored on disk",
                        max_length=255,
                    ),
                ),
                (
                    "file_path",
                    models.CharField(help_text="Full path to the file", max_length=500),
                ),
                (
                    "file_size",
                    models.BigIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                (
                    "image_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Unique image identifier (TCSpy IMAGEID or generated)",
                        max_length=64,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "filename_pattern",
                    models.CharField(
                        choices=[
                            ("new_fits", "New Format (Current)"),
                            ("old_v2_fits", "Old Format v2 (with Unit)"),
                            ("old_v1_fits", "Old Format v1 (Original)"),
                            ("old_v0_fits", "Old Format v0 (Early)"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                (
                    "filename_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Parsed filename components and variants",
                    ),
                ),
                (
                    "unified_filename",
                    models.CharField(
                        db_index=True,
                        help_text="Filename converted to new format standard",
                        max_length=255,
                    ),
                ),
                (
                    "obstime",
                    models.DateTimeField(
                        db_index=True, help_text="Observation timestamp (UTC)"
                    ),
                ),
                (
                    "local_obstime",
                    models.DateTimeField(
                        blank=True, help_text="Local observation timestamp", null=True
                    ),
                ),
                (
                    "jd",
                    models.FloatField(blank=True, help_text="Julian Date", null=True),
                ),
                (
                    "mjd",
                    models.FloatField(
                        blank=True, help_text="Modified Julian Date", null=True
                    ),
                ),
                (
                    "exptime",
                    models.FloatField(
                        db_index=True, help_text="Exposure time in seconds"
                    ),
                ),
                ("binning_x", models.IntegerField(default=1)),
                ("binning_y", models.IntegerField(default=1)),
                ("gain", models.IntegerField(blank=True, db_index=True, null=True)),
                ("egain", models.FloatField(blank=True, db_index=True, null=True)),
                (
                    "instrument",
                    models.CharField(
                        blank=True, help_text="Camera/Instrument name", max_length=100
                    ),
                ),
                (
                    "ccdtemp",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="CCD temperature in Celsius",
                        null=True,
                    ),
                ),
                (
                    "set_ccdtemp",
                    models.FloatField(
                        blank=True, help_text="CCD temperature setpoint", null=True
                    ),
                ),
                (
                    "cooler_power",
                    models.FloatField(
                        blank=True, help_text="CCD cooler power percentage", null=True
                    ),
                ),
                (
                    "pixscale_x",
                    models.FloatField(
                        blank=True, help_text="Pixel size X in microns", null=True
                    ),
                ),
                (
                    "pixscale_y",
                    models.FloatField(
                        blank=True, help_text="Pixel size Y in microns", null=True
                    ),
                ),
                (
                    "software_used",
                    models.CharField(
                        choices=[
                            ("nina", "N.I.N.A."),
                            ("tcspy", "TCSPY"),
                            ("unknown", "Unknown"),
                        ],
                        db_index=True,
                        default="unknown",
                        max_length=20,
                    ),
                ),
                (
                    "software_version",
                    models.CharField(
                        blank=True, help_text="Software version string", max_length=100
                    ),
                ),
                (
                    "observer",
                    models.CharField(
                        blank=True, help_text="Observer name", max_length=100
                    ),
                ),
                (
                    "fits_header_cache",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complete FITS header for reference",
                    ),
                ),
                ("header_parsed", models.BooleanField(db_index=True, default=False)),
                (
                    "processing_status",
                    models.CharField(db_index=True, default="pending", max_length=20),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("median_level", models.FloatField(blank=True, null=True)),
                ("noise_level", models.FloatField(blank=True, null=True)),
                ("std_deviation", models.FloatField(blank=True, null=True)),
                ("is_usable", models.BooleanField(default=True)),
                ("quality_score", models.FloatField(blank=True, null=True)),
                ("quality_flags", models.JSONField(blank=True, default=list)),
                (
                    "night",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="survey.night"
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="facility.unit"
                    ),
                ),
            ],
            options={
                "verbose_name": "Bias Frame",
                "verbose_name_plural": "Bias Frames",
                "indexes": [
                    models.Index(
                        fields=["unit", "night", "gain"],
                        name="survey_bias_unit_id_1e7626_idx",
                    ),
                    models.Index(
                        fields=["is_usable", "quality_score"],
                        name="survey_bias_is_usab_9d092d_idx",
                    ),
                    models.Index(
                        fields=["median_level"], name="survey_bias_median__8c6cbb_idx"
                    ),
                    models.Index(
                        fields=["obstime"], name="survey_bias_obstime_f43510_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="DarkFrame",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "original_filename",
                    models.CharField(
                        db_index=True,
                        help_text="Original filename as stored on disk",
                        max_length=255,
                    ),
                ),
                (
                    "file_path",
                    models.CharField(help_text="Full path to the file", max_length=500),
                ),
                (
                    "file_size",
                    models.BigIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                (
                    "image_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Unique image identifier (TCSpy IMAGEID or generated)",
                        max_length=64,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "filename_pattern",
                    models.CharField(
                        choices=[
                            ("new_fits", "New Format (Current)"),
                            ("old_v2_fits", "Old Format v2 (with Unit)"),
                            ("old_v1_fits", "Old Format v1 (Original)"),
                            ("old_v0_fits", "Old Format v0 (Early)"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                (
                    "filename_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Parsed filename components and variants",
                    ),
                ),
                (
                    "unified_filename",
                    models.CharField(
                        db_index=True,
                        help_text="Filename converted to new format standard",
                        max_length=255,
                    ),
                ),
                (
                    "obstime",
                    models.DateTimeField(
                        db_index=True, help_text="Observation timestamp (UTC)"
                    ),
                ),
                (
                    "local_obstime",
                    models.DateTimeField(
                        blank=True, help_text="Local observation timestamp", null=True
                    ),
                ),
                (
                    "jd",
                    models.FloatField(blank=True, help_text="Julian Date", null=True),
                ),
                (
                    "mjd",
                    models.FloatField(
                        blank=True, help_text="Modified Julian Date", null=True
                    ),
                ),
                (
                    "exptime",
                    models.FloatField(
                        db_index=True, help_text="Exposure time in seconds"
                    ),
                ),
                ("binning_x", models.IntegerField(default=1)),
                ("binning_y", models.IntegerField(default=1)),
                ("gain", models.IntegerField(blank=True, db_index=True, null=True)),
                ("egain", models.FloatField(blank=True, db_index=True, null=True)),
                (
                    "instrument",
                    models.CharField(
                        blank=True, help_text="Camera/Instrument name", max_length=100
                    ),
                ),
                (
                    "ccdtemp",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="CCD temperature in Celsius",
                        null=True,
                    ),
                ),
                (
                    "set_ccdtemp",
                    models.FloatField(
                        blank=True, help_text="CCD temperature setpoint", null=True
                    ),
                ),
                (
                    "cooler_power",
                    models.FloatField(
                        blank=True, help_text="CCD cooler power percentage", null=True
                    ),
                ),
                (
                    "pixscale_x",
                    models.FloatField(
                        blank=True, help_text="Pixel size X in microns", null=True
                    ),
                ),
                (
                    "pixscale_y",
                    models.FloatField(
                        blank=True, help_text="Pixel size Y in microns", null=True
                    ),
                ),
                (
                    "software_used",
                    models.CharField(
                        choices=[
                            ("nina", "N.I.N.A."),
                            ("tcspy", "TCSPY"),
                            ("unknown", "Unknown"),
                        ],
                        db_index=True,
                        default="unknown",
                        max_length=20,
                    ),
                ),
                (
                    "software_version",
                    models.CharField(
                        blank=True, help_text="Software version string", max_length=100
                    ),
                ),
                (
                    "observer",
                    models.CharField(
                        blank=True, help_text="Observer name", max_length=100
                    ),
                ),
                (
                    "fits_header_cache",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complete FITS header for reference",
                    ),
                ),
                ("header_parsed", models.BooleanField(db_index=True, default=False)),
                (
                    "processing_status",
                    models.CharField(db_index=True, default="pending", max_length=20),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("dark_current", models.FloatField(blank=True, null=True)),
                ("hotpix_count", models.IntegerField(blank=True, null=True)),
                ("median_level", models.FloatField(blank=True, null=True)),
                ("is_usable", models.BooleanField(default=True)),
                ("quality_score", models.FloatField(blank=True, null=True)),
                ("quality_flags", models.JSONField(blank=True, default=list)),
                (
                    "night",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="survey.night"
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="facility.unit"
                    ),
                ),
            ],
            options={
                "verbose_name": "Dark Frame",
                "verbose_name_plural": "Dark Frames",
                "indexes": [
                    models.Index(
                        fields=["unit", "night", "exptime", "gain"],
                        name="survey_dark_unit_id_d107d8_idx",
                    ),
                    models.Index(
                        fields=["is_usable", "quality_score"],
                        name="survey_dark_is_usab_8b37d5_idx",
                    ),
                    models.Index(
                        fields=["dark_current"], name="survey_dark_dark_cu_c99f03_idx"
                    ),
                    models.Index(
                        fields=["obstime"], name="survey_dark_obstime_98068b_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="FlatFrame",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "original_filename",
                    models.CharField(
                        db_index=True,
                        help_text="Original filename as stored on disk",
                        max_length=255,
                    ),
                ),
                (
                    "file_path",
                    models.CharField(help_text="Full path to the file", max_length=500),
                ),
                (
                    "file_size",
                    models.BigIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                (
                    "image_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Unique image identifier (TCSpy IMAGEID or generated)",
                        max_length=64,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "filename_pattern",
                    models.CharField(
                        choices=[
                            ("new_fits", "New Format (Current)"),
                            ("old_v2_fits", "Old Format v2 (with Unit)"),
                            ("old_v1_fits", "Old Format v1 (Original)"),
                            ("old_v0_fits", "Old Format v0 (Early)"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                (
                    "filename_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Parsed filename components and variants",
                    ),
                ),
                (
                    "unified_filename",
                    models.CharField(
                        db_index=True,
                        help_text="Filename converted to new format standard",
                        max_length=255,
                    ),
                ),
                (
                    "obstime",
                    models.DateTimeField(
                        db_index=True, help_text="Observation timestamp (UTC)"
                    ),
                ),
                (
                    "local_obstime",
                    models.DateTimeField(
                        blank=True, help_text="Local observation timestamp", null=True
                    ),
                ),
                (
                    "jd",
                    models.FloatField(blank=True, help_text="Julian Date", null=True),
                ),
                (
                    "mjd",
                    models.FloatField(
                        blank=True, help_text="Modified Julian Date", null=True
                    ),
                ),
                (
                    "exptime",
                    models.FloatField(
                        db_index=True, help_text="Exposure time in seconds"
                    ),
                ),
                ("binning_x", models.IntegerField(default=1)),
                ("binning_y", models.IntegerField(default=1)),
                ("gain", models.IntegerField(blank=True, db_index=True, null=True)),
                ("egain", models.FloatField(blank=True, db_index=True, null=True)),
                (
                    "instrument",
                    models.CharField(
                        blank=True, help_text="Camera/Instrument name", max_length=100
                    ),
                ),
                (
                    "ccdtemp",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="CCD temperature in Celsius",
                        null=True,
                    ),
                ),
                (
                    "set_ccdtemp",
                    models.FloatField(
                        blank=True, help_text="CCD temperature setpoint", null=True
                    ),
                ),
                (
                    "cooler_power",
                    models.FloatField(
                        blank=True, help_text="CCD cooler power percentage", null=True
                    ),
                ),
                (
                    "pixscale_x",
                    models.FloatField(
                        blank=True, help_text="Pixel size X in microns", null=True
                    ),
                ),
                (
                    "pixscale_y",
                    models.FloatField(
                        blank=True, help_text="Pixel size Y in microns", null=True
                    ),
                ),
                (
                    "software_used",
                    models.CharField(
                        choices=[
                            ("nina", "N.I.N.A."),
                            ("tcspy", "TCSPY"),
                            ("unknown", "Unknown"),
                        ],
                        db_index=True,
                        default="unknown",
                        max_length=20,
                    ),
                ),
                (
                    "software_version",
                    models.CharField(
                        blank=True, help_text="Software version string", max_length=100
                    ),
                ),
                (
                    "observer",
                    models.CharField(
                        blank=True, help_text="Observer name", max_length=100
                    ),
                ),
                (
                    "fits_header_cache",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complete FITS header for reference",
                    ),
                ),
                ("header_parsed", models.BooleanField(db_index=True, default=False)),
                (
                    "processing_status",
                    models.CharField(db_index=True, default="pending", max_length=20),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("median_counts", models.FloatField(blank=True, null=True)),
                ("uniformity_rms", models.FloatField(blank=True, null=True)),
                ("vignetting_level", models.FloatField(blank=True, null=True)),
                ("illumination_gradient", models.FloatField(blank=True, null=True)),
                ("is_usable", models.BooleanField(default=True)),
                ("quality_score", models.FloatField(blank=True, null=True)),
                ("quality_flags", models.JSONField(blank=True, default=list)),
                (
                    "filter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="facility.filter",
                    ),
                ),
                (
                    "night",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="survey.night"
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="facility.unit"
                    ),
                ),
            ],
            options={
                "verbose_name": "Flat Frame",
                "verbose_name_plural": "Flat Frames",
                "indexes": [
                    models.Index(
                        fields=["unit", "night", "filter"],
                        name="survey_flat_unit_id_151b5d_idx",
                    ),
                    models.Index(
                        fields=["filter", "is_usable"],
                        name="survey_flat_filter__46b65d_idx",
                    ),
                    models.Index(
                        fields=["median_counts"], name="survey_flat_median__dd36eb_idx"
                    ),
                    models.Index(
                        fields=["obstime"], name="survey_flat_obstime_0a96cd_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ScienceFrame",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "original_filename",
                    models.CharField(
                        db_index=True,
                        help_text="Original filename as stored on disk",
                        max_length=255,
                    ),
                ),
                (
                    "file_path",
                    models.CharField(help_text="Full path to the file", max_length=500),
                ),
                (
                    "file_size",
                    models.BigIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                (
                    "image_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Unique image identifier (TCSpy IMAGEID or generated)",
                        max_length=64,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "filename_pattern",
                    models.CharField(
                        choices=[
                            ("new_fits", "New Format (Current)"),
                            ("old_v2_fits", "Old Format v2 (with Unit)"),
                            ("old_v1_fits", "Old Format v1 (Original)"),
                            ("old_v0_fits", "Old Format v0 (Early)"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                (
                    "filename_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Parsed filename components and variants",
                    ),
                ),
                (
                    "unified_filename",
                    models.CharField(
                        db_index=True,
                        help_text="Filename converted to new format standard",
                        max_length=255,
                    ),
                ),
                (
                    "obstime",
                    models.DateTimeField(
                        db_index=True, help_text="Observation timestamp (UTC)"
                    ),
                ),
                (
                    "local_obstime",
                    models.DateTimeField(
                        blank=True, help_text="Local observation timestamp", null=True
                    ),
                ),
                (
                    "jd",
                    models.FloatField(blank=True, help_text="Julian Date", null=True),
                ),
                (
                    "mjd",
                    models.FloatField(
                        blank=True, help_text="Modified Julian Date", null=True
                    ),
                ),
                (
                    "exptime",
                    models.FloatField(
                        db_index=True, help_text="Exposure time in seconds"
                    ),
                ),
                ("binning_x", models.IntegerField(default=1)),
                ("binning_y", models.IntegerField(default=1)),
                ("gain", models.IntegerField(blank=True, db_index=True, null=True)),
                ("egain", models.FloatField(blank=True, db_index=True, null=True)),
                (
                    "instrument",
                    models.CharField(
                        blank=True, help_text="Camera/Instrument name", max_length=100
                    ),
                ),
                (
                    "ccdtemp",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="CCD temperature in Celsius",
                        null=True,
                    ),
                ),
                (
                    "set_ccdtemp",
                    models.FloatField(
                        blank=True, help_text="CCD temperature setpoint", null=True
                    ),
                ),
                (
                    "cooler_power",
                    models.FloatField(
                        blank=True, help_text="CCD cooler power percentage", null=True
                    ),
                ),
                (
                    "pixscale_x",
                    models.FloatField(
                        blank=True, help_text="Pixel size X in microns", null=True
                    ),
                ),
                (
                    "pixscale_y",
                    models.FloatField(
                        blank=True, help_text="Pixel size Y in microns", null=True
                    ),
                ),
                (
                    "software_used",
                    models.CharField(
                        choices=[
                            ("nina", "N.I.N.A."),
                            ("tcspy", "TCSPY"),
                            ("unknown", "Unknown"),
                        ],
                        db_index=True,
                        default="unknown",
                        max_length=20,
                    ),
                ),
                (
                    "software_version",
                    models.CharField(
                        blank=True, help_text="Software version string", max_length=100
                    ),
                ),
                (
                    "observer",
                    models.CharField(
                        blank=True, help_text="Observer name", max_length=100
                    ),
                ),
                (
                    "fits_header_cache",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complete FITS header for reference",
                    ),
                ),
                ("header_parsed", models.BooleanField(db_index=True, default=False)),
                (
                    "processing_status",
                    models.CharField(db_index=True, default="pending", max_length=20),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "object_name",
                    models.CharField(
                        db_index=True, help_text="OBJECT field", max_length=100
                    ),
                ),
                (
                    "object_type",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="OBJTYPE - Object classification",
                        max_length=20,
                    ),
                ),
                (
                    "object_id",
                    models.CharField(
                        blank=True,
                        help_text="OBJCTID - Object identifier",
                        max_length=64,
                    ),
                ),
                (
                    "object_ra_hms",
                    models.CharField(
                        blank=True,
                        help_text="OBJCTRA - RA in HMS format",
                        max_length=20,
                    ),
                ),
                (
                    "object_dec_dms",
                    models.CharField(
                        blank=True,
                        help_text="OBJCTDEC - Dec in DMS format",
                        max_length=20,
                    ),
                ),
                (
                    "object_ra",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="OBJCTRA_ - Target RA in degrees",
                        null=True,
                    ),
                ),
                (
                    "object_dec",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="OBJCTDE_ - Target Dec in degrees",
                        null=True,
                    ),
                ),
                (
                    "object_alt",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="OBJCTALT - Target altitude",
                        null=True,
                    ),
                ),
                (
                    "object_az",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="OBJCTAZ - Target azimuth",
                        null=True,
                    ),
                ),
                (
                    "object_ha",
                    models.CharField(
                        blank=True,
                        help_text="OBJCTHA - Target hour angle",
                        max_length=20,
                    ),
                ),
                (
                    "unit_ra",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="RA - Telescope RA in degrees",
                        null=True,
                    ),
                ),
                (
                    "unit_dec",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="DEC - Telescope Dec in degrees",
                        null=True,
                    ),
                ),
                (
                    "unit_alt",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="ALTITUDE/CENTALT - Telescope altitude",
                        null=True,
                    ),
                ),
                (
                    "unit_az",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="AZIMUTH/CENTAZ - Telescope azimuth",
                        null=True,
                    ),
                ),
                (
                    "airmass",
                    models.FloatField(
                        blank=True, db_index=True, help_text="AIRMASS", null=True
                    ),
                ),
                (
                    "moon_sep",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="MOONSEP - Separation from moon in degrees",
                        null=True,
                    ),
                ),
                (
                    "moon_phase",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="MOONPHAS - Moon illumination fraction (0-1)",
                        null=True,
                    ),
                ),
                (
                    "obsmode",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="OBSMODE - Observation mode",
                        max_length=20,
                    ),
                ),
                (
                    "specmode",
                    models.CharField(
                        blank=True,
                        help_text="SPECMODE - Spectroscopic mode",
                        max_length=20,
                    ),
                ),
                (
                    "ntels",
                    models.IntegerField(
                        blank=True,
                        help_text="NTELSCOP - Number of telescopes in observation",
                        null=True,
                    ),
                ),
                (
                    "focuser_position",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="FOCUSPOS/FOCPOS - Focuser position",
                        null=True,
                    ),
                ),
                (
                    "af_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="AFTIME - Last autofocus time",
                        null=True,
                    ),
                ),
                (
                    "af_value",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="AFVALUE - Autofocus position",
                        null=True,
                    ),
                ),
                (
                    "af_error",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="AFERROR - Autofocus error",
                        null=True,
                    ),
                ),
                (
                    "weather_update_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="DATE-WEA - Weather data timestamp",
                        null=True,
                    ),
                ),
                (
                    "ambient_temperature",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="AMBTEMP - Ambient temperature (°C)",
                        null=True,
                    ),
                ),
                (
                    "humidity",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="HUMIDITY - Relative humidity (%)",
                        null=True,
                    ),
                ),
                (
                    "pressure",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="PRESSURE - Atmospheric pressure (hPa)",
                        null=True,
                    ),
                ),
                (
                    "dew_point",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="DEWPOINT - Dew point temperature (°C)",
                        null=True,
                    ),
                ),
                (
                    "wind_speed",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="WINDSPED/WINDSPD - Wind speed (m/s)",
                        null=True,
                    ),
                ),
                (
                    "wind_direction",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="WINDDIR - Wind direction (degrees)",
                        null=True,
                    ),
                ),
                (
                    "wind_gust",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="WINDGUST - Wind gust speed (m/s)",
                        null=True,
                    ),
                ),
                (
                    "sky_brightness",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="SKYBRGHT/MPSAS - Sky brightness (mag/arcsec²)",
                        null=True,
                    ),
                ),
                (
                    "sky_temperature",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="SKYTEMP - Sky temperature (°C)",
                        null=True,
                    ),
                ),
                (
                    "cloud_fraction",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="CLUDFRAC/CLOUDCVR - Cloud coverage fraction (0-1)",
                        null=True,
                    ),
                ),
                (
                    "rain_rate",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="RAINRATE - Rain rate (mm/h)",
                        null=True,
                    ),
                ),
                (
                    "weather_age",
                    models.FloatField(
                        blank=True,
                        help_text="WEATHER_AGE - Age of weather data (NINA only)",
                        null=True,
                    ),
                ),
                (
                    "weather_station",
                    models.CharField(
                        blank=True,
                        help_text="Weather station identifier (NINA only)",
                        max_length=50,
                    ),
                ),
                (
                    "fwhm",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="SKYFWHM/STARFWHM - Seeing FWHM (arcsec)",
                        null=True,
                    ),
                ),
                (
                    "background_level",
                    models.FloatField(
                        blank=True, help_text="Background level (ADU)", null=True
                    ),
                ),
                (
                    "num_sources",
                    models.IntegerField(
                        blank=True, help_text="Number of detected sources", null=True
                    ),
                ),
                (
                    "limiting_magnitude",
                    models.FloatField(
                        blank=True, help_text="Limiting magnitude", null=True
                    ),
                ),
                (
                    "ellipticity",
                    models.FloatField(
                        blank=True, help_text="Average source ellipticity", null=True
                    ),
                ),
                (
                    "star_count",
                    models.IntegerField(
                        blank=True,
                        help_text="STAR_COUNT - Number of detected stars",
                        null=True,
                    ),
                ),
                (
                    "median_hfd",
                    models.FloatField(
                        blank=True,
                        help_text="HFD - Half Flux Diameter median (pixels)",
                        null=True,
                    ),
                ),
                (
                    "nina_hfr",
                    models.FloatField(
                        blank=True,
                        help_text="HFR - Half Flux Radius (NINA only)",
                        null=True,
                    ),
                ),
                (
                    "nina_star_detection_sensitivity",
                    models.FloatField(
                        blank=True,
                        help_text="Star detection sensitivity (NINA only)",
                        null=True,
                    ),
                ),
                (
                    "is_too",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="IS_TOO - Target of Opportunity",
                    ),
                ),
                (
                    "is_shift_observation",
                    models.BooleanField(
                        db_index=True, default=False, help_text="Shift observation flag"
                    ),
                ),
                (
                    "is_test_observation",
                    models.BooleanField(
                        db_index=True, default=False, help_text="Test observation flag"
                    ),
                ),
                (
                    "guiding_enabled",
                    models.BooleanField(
                        blank=True,
                        help_text="GUIDING - Guiding status (NINA only)",
                        null=True,
                    ),
                ),
                (
                    "guiding_rms_ra",
                    models.FloatField(
                        blank=True,
                        help_text="Guiding RMS RA (arcsec, NINA only)",
                        null=True,
                    ),
                ),
                (
                    "guiding_rms_dec",
                    models.FloatField(
                        blank=True,
                        help_text="Guiding RMS Dec (arcsec, NINA only)",
                        null=True,
                    ),
                ),
                (
                    "guiding_rms_total",
                    models.FloatField(
                        blank=True,
                        help_text="Guiding RMS total (arcsec, NINA only)",
                        null=True,
                    ),
                ),
                (
                    "plate_solved",
                    models.BooleanField(
                        blank=True, help_text="Plate solving status", null=True
                    ),
                ),
                (
                    "plate_solve_ra",
                    models.FloatField(
                        blank=True, help_text="Plate solved RA", null=True
                    ),
                ),
                (
                    "plate_solve_dec",
                    models.FloatField(
                        blank=True, help_text="Plate solved Dec", null=True
                    ),
                ),
                (
                    "plate_solve_angle",
                    models.FloatField(
                        blank=True, help_text="Plate solved rotation angle", null=True
                    ),
                ),
                (
                    "plate_solve_pixel_scale",
                    models.FloatField(
                        blank=True, help_text="Plate solved pixel scale", null=True
                    ),
                ),
                (
                    "sequence_title",
                    models.CharField(
                        blank=True,
                        help_text="Sequence title (NINA only)",
                        max_length=100,
                    ),
                ),
                (
                    "sequence_target",
                    models.CharField(
                        blank=True,
                        help_text="Sequence target (NINA only)",
                        max_length=100,
                    ),
                ),
                (
                    "obsnote",
                    models.TextField(blank=True, help_text="NOTE - Observation notes"),
                ),
                (
                    "filter",
                    models.ForeignKey(
                        help_text="Filter from FITS header (as-is)",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="facility.filter",
                    ),
                ),
                (
                    "night",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="survey.night"
                    ),
                ),
                (
                    "tile",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="survey.tile",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="facility.unit"
                    ),
                ),
            ],
            options={
                "verbose_name": "Science Frame",
                "verbose_name_plural": "Science Frames",
                "indexes": [
                    models.Index(
                        fields=["unit", "night", "filter"],
                        name="survey_scie_unit_id_effb47_idx",
                    ),
                    models.Index(
                        fields=["object_name"], name="survey_scie_object__c53bb5_idx"
                    ),
                    models.Index(
                        fields=["object_type"], name="survey_scie_object__669a83_idx"
                    ),
                    models.Index(
                        fields=["tile", "filter"], name="survey_scie_tile_id_258538_idx"
                    ),
                    models.Index(
                        fields=["object_ra", "object_dec"],
                        name="survey_scie_object__08e745_idx",
                    ),
                    models.Index(
                        fields=["unit_ra", "unit_dec"],
                        name="survey_scie_unit_ra_a01533_idx",
                    ),
                    models.Index(
                        fields=["object_alt", "object_az"],
                        name="survey_scie_object__b1fa13_idx",
                    ),
                    models.Index(
                        fields=["unit_alt", "unit_az"],
                        name="survey_scie_unit_al_e45fc0_idx",
                    ),
                    models.Index(fields=["fwhm"], name="survey_scie_fwhm_e16fa0_idx"),
                    models.Index(
                        fields=["airmass"], name="survey_scie_airmass_7fd01e_idx"
                    ),
                    models.Index(
                        fields=["ambient_temperature"],
                        name="survey_scie_ambient_fefc9a_idx",
                    ),
                    models.Index(
                        fields=["humidity"], name="survey_scie_humidit_0a2d24_idx"
                    ),
                    models.Index(
                        fields=["pressure"], name="survey_scie_pressur_7dbe82_idx"
                    ),
                    models.Index(
                        fields=["dew_point"], name="survey_scie_dew_poi_274222_idx"
                    ),
                    models.Index(
                        fields=["wind_speed"], name="survey_scie_wind_sp_5e3b54_idx"
                    ),
                    models.Index(
                        fields=["wind_direction"], name="survey_scie_wind_di_438d96_idx"
                    ),
                    models.Index(
                        fields=["wind_gust"], name="survey_scie_wind_gu_27009d_idx"
                    ),
                    models.Index(
                        fields=["sky_brightness"], name="survey_scie_sky_bri_ef8223_idx"
                    ),
                    models.Index(
                        fields=["sky_temperature"],
                        name="survey_scie_sky_tem_2b56d1_idx",
                    ),
                    models.Index(
                        fields=["cloud_fraction"], name="survey_scie_cloud_f_1fc050_idx"
                    ),
                    models.Index(
                        fields=["rain_rate"], name="survey_scie_rain_ra_9dfae7_idx"
                    ),
                    models.Index(
                        fields=["focuser_position"],
                        name="survey_scie_focuser_e328b0_idx",
                    ),
                    models.Index(
                        fields=["af_time"], name="survey_scie_af_time_74f924_idx"
                    ),
                    models.Index(
                        fields=["af_value"], name="survey_scie_af_valu_541309_idx"
                    ),
                    models.Index(
                        fields=["af_error"], name="survey_scie_af_erro_caaf8d_idx"
                    ),
                    models.Index(
                        fields=["moon_sep"], name="survey_scie_moon_se_d52a91_idx"
                    ),
                    models.Index(
                        fields=["moon_phase"], name="survey_scie_moon_ph_aaa585_idx"
                    ),
                    models.Index(
                        fields=["obsmode"], name="survey_scie_obsmode_8dab0b_idx"
                    ),
                    models.Index(
                        fields=["is_too", "obstime"],
                        name="survey_scie_is_too_6ad1c6_idx",
                    ),
                    models.Index(
                        fields=["is_shift_observation"],
                        name="survey_scie_is_shif_8d0d6d_idx",
                    ),
                    models.Index(
                        fields=["is_test_observation"],
                        name="survey_scie_is_test_b4ec50_idx",
                    ),
                    models.Index(
                        fields=["star_count"], name="survey_scie_star_co_ef02ba_idx"
                    ),
                    models.Index(
                        fields=["median_hfd"], name="survey_scie_median__854b46_idx"
                    ),
                    models.Index(
                        fields=["nina_hfr"], name="survey_scie_nina_hf_81a99f_idx"
                    ),
                    models.Index(
                        fields=["guiding_enabled"],
                        name="survey_scie_guiding_1f5d97_idx",
                    ),
                    models.Index(
                        fields=["guiding_rms_total"],
                        name="survey_scie_guiding_3418f1_idx",
                    ),
                    models.Index(
                        fields=["plate_solved"], name="survey_scie_plate_s_c89c21_idx"
                    ),
                    models.Index(
                        fields=["ambient_temperature", "humidity", "wind_speed"],
                        name="survey_scie_ambient_39960f_idx",
                    ),
                    models.Index(
                        fields=["cloud_fraction", "rain_rate"],
                        name="survey_scie_cloud_f_a18fc7_idx",
                    ),
                    models.Index(
                        fields=["fwhm", "airmass", "sky_brightness"],
                        name="survey_scie_fwhm_47a778_idx",
                    ),
                    models.Index(
                        fields=["af_time", "af_error"],
                        name="survey_scie_af_time_6c48af_idx",
                    ),
                    models.Index(
                        fields=["focuser_position", "fwhm"],
                        name="survey_scie_focuser_8b49ab_idx",
                    ),
                    models.Index(
                        fields=["guiding_rms_total", "fwhm"],
                        name="survey_scie_guiding_805328_idx",
                    ),
                ],
            },
        ),
    ]
